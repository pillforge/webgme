/* Generated file based on ejs templates */
define([], function() {
    return {
    "Layout.js.ejs": "/*globals define, WebGMEGlobal, $ */\ndefine([\n    'lib/jquery/' + (DEBUG ? 'jquery.layout' : 'jquery.layout.min'),\n    'js/logger',\n    'text!./templates/<%= layoutID %>.html',\n    'text!./<%= layoutID %>Config.json'\n], function(\n    _jQueryLayout,\n    Logger,\n    defaultLayoutTemplate,\n    LayoutConfigJSON\n) {\n    'use strict';\n    \n    var CONFIG = JSON.parse(LayoutConfigJSON),\n        SPACING_OPEN_TOUCH = 10,\n        SPACING_CLOSED_TOUCH = 10,\n        SPACING_OPEN_DESKTOP = 3,\n        SPACING_CLOSED_DESKTOP = 6,\n        SPACING_OPEN = WebGMEGlobal.SUPPORTS_TOUCH ? SPACING_OPEN_TOUCH : SPACING_OPEN_DESKTOP,\n        SPACING_CLOSED = WebGMEGlobal.SUPPORTS_TOUCH ? SPACING_CLOSED_TOUCH : SPACING_CLOSED_DESKTOP,\n        SIDE_PANEL_WIDTH = 202;\n\n    var <%= layoutID %> = function(params) {\n        this._logger = (params && params.logger) || Logger.create('gme:Layouts:<%= layoutID %>',\n            WebGMEGlobal.gmeConfig.client.log);\n        this.panels = CONFIG.panels;\n        this._template = (params && params.template) || defaultLayoutTemplate;\n\n        this._body = null;\n        this._panelToContainer = {};\n    };\n\n    /**\n     * Initialize the html page. This example is using the jQuery Layout plugin.\n     *\n     * @return {undefined}\n     */\n    <%= layoutID %>.prototype.init = function() {\n        var self = this;\n\n        this._body = $('body');\n        this._body.html(this._template);\n\n        this._centerPanel = this._body.find('div.ui-layout-center');\n        this._toolboxPanel = this._body.find('div.ui-layout-east');\n\n        this._headerPanel = this._body.find('div.ui-layout-north');\n        this._footerPanel = this._body.find('div.ui-layout-south');\n\n        this._canvas = null;\n        this._toolbox = null;\n        this._body.layout({\n            north: {\n                closable: false,\n                resizable: false,\n                slidable: false,\n                spacing_open: 0, //jshint ignore: line\n                size: 64\n            },\n            south: {\n                closable: false,\n                resizable: false,\n                slidable: false,\n                spacing_open: 0, //jshint ignore: line\n                size: 27        //has to match footer CSS settings (height + border)\n            },\n            east: {\n                size: SIDE_PANEL_WIDTH,\n                minSize: SIDE_PANEL_WIDTH,\n                resizable: true,\n                slidable: false,\n                spacing_open: SPACING_OPEN, //jshint ignore: line\n                spacing_closed: SPACING_CLOSED, //jshint ignore: line\n                onresize: function (/*paneName, paneElement, paneState, paneOptions, layoutName*/) {\n                    self._onToolboxResize();\n                }\n            },\n            center: {\n                onresize: function (/*paneName, paneElement, paneState, paneOptions, layoutName*/) {\n                    self._onCenterResize();\n                }\n            }\n        });\n    };\n\n    /**\n     * Add a panel to a given container. This is defined in the corresponding\n     * layout config JSON file.\n     *\n     * @param {Panel} panel\n     * @param {String} container\n     * @return {undefined}\n     */\n    <%= layoutID %>.prototype.addToContainer = function(panel, container) {\n        if (container === 'header') {\n            this._headerPanel.append(panel.$pEl);\n        } else if (container === 'footer') {\n            this._footerPanel.append(panel.$pEl);\n        } else if (container === 'toolbox') {\n            this._toolboxPanel.append(panel.$pEl);\n            this._toolbox = panel;\n            this._onToolboxResize();\n        } else if (container === 'center') {\n            this._centerPanel.append(panel.$pEl);\n            this._canvas = panel;\n            this._onCenterResize();\n            return this._onCenterResize;\n        }\n    };\n\n    /**\n     * Remove the given panel from the views\n     *\n     * @param {Panel} panel\n     * @return {undefined}\n     */\n    <%= layoutID %>.prototype.remove = function(panel) {\n        if (this._toolbox === panel) {\n            this._toolboxPanel.empty();\n        } else if (this._canvas === panel) {\n            this._centerPanel.empty();\n        }\n    };\n\n    /**\n     * Remove the current layout\n     *\n     * @return {undefined}\n     */\n    <%= layoutID %>.prototype.destroy = function() {\n        this._body.empty();\n    };\n\n    // Resize handlers\n    //\n    // These are internally called and used by the example to provide a responsive\n    // UI (even if it is simply scaling linearly here)\n    <%= layoutID %>.prototype._onCenterResize = function() {\n        if (this._canvas) {\n            this._canvas.setSize(this._centerPanel.width(), this._centerPanel.height());\n        }\n    };\n\n    <%= layoutID %>.prototype._onToolboxResize = function() {\n        if (this._toolbox) {\n            this._toolbox.setSize(this._toolboxPanel.width(), this._toolboxPanel.height());\n        }\n    };\n\n    return <%= layoutID %>;\n});\n",
    "LayoutConfig.json.ejs": "{\n  \"panels\": [\n    {\n      \"id\": \"Header\",\n      \"panel\": \"Header/HeaderPanel\",\n      \"container\": \"header\",\n      \"DEBUG_ONLY\": false\n    },\n    {\n      \"id\": \"Footer\",\n      \"panel\": \"FooterControls/FooterControlsPanel\",\n      \"container\": \"footer\",\n      \"DEBUG_ONLY\": false\n    },\n    {\n      \"id\": \"PartBrowserPanel\",\n      \"panel\": \"PartBrowser/PartBrowserPanel\",\n      \"container\": \"toolbox\",\n      \"DEBUG_ONLY\": false\n    },\n    {\n      \"id\": \"ModelEditor\",\n      \"panel\": \"ModelEditor/ModelEditorPanel\",\n      \"container\": \"center\",\n      \"DEBUG_ONLY\": false\n    }\n  ]\n}\n",
    "templates/Layout.html.ejs": "<div class=\"ui-layout-center\"></div>\n<div class=\"ui-layout-east side-panel\" style=\"overflow: auto;\" ></div>\n<div class=\"ui-layout-north\"></div>\n<div class=\"ui-layout-south\"></div>\n"
}});
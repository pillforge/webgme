#%RAML 0.8
title: WebGME API
version: 1.0


securitySchemes:
  - basic:
      description: Basic authentication scheme
      type: Basic Authentication
      describedBy:
        headers:
          Authorization:
            type: string
            description: Basic authentication base64 encoded username and password
            example: Basic Z3Vlc3Q6Z3Vlc3Q=
        responses:
          401:
            description: Authentication required
          403:
            description: Forbidden
  - orgOrSiteAdmin:
      description: Admin for the entire site or the organization.
      type: Basic Authentication
      describedBy:
        responses:
          403:
            description: Not authorized.


resourceTypes:
  - collection:
      description: Collection of available <<resourcePathName>> in WebGME.
      get:
        description: Get a list of <<resourcePathName>>.
        responses:
          200:
            body:
              application/json:
                example: |
                  <<exampleCollection>>
      put:
        description: |
          Add a new <<resourcePathName|!singularize>> to WebGME.
        securedBy: [ basic ]
        body:
          application/json:
            schema: <<resourcePathName|!singularize>>
            example: |
              <<exampleItem>>
        responses:
          200:
            body:
              application/json:
                example: |
                  { "message": "The <<resourcePathName|!singularize>> has been properly entered" }
          400:
          
  - collection-item:
      description: Entity representing a <<resourcePathName|!singularize>>
      get:
        description: |
          Get the <<resourcePathName|!singularize>>
          with <<resourcePathName|!singularize>>Id =
          {<<resourcePathName|!singularize>>Id}
        responses:
          200:
            body:
              application/json:
                example: |
                  <<exampleItem>>
          404:
            body:
              application/json:
                example: |
                  {"message": "<<resourcePathName|!singularize>> not found" }
      put:
          securedBy: [ basic ]
      patch:
          securedBy: [ basic ]
      delete:
          securedBy: [ basic ]
          responses:
            204:          
        

/:
  get:
    description: WebGME API entry point
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "current_user_url": "http://localhost:8888/api/user",
                "organization_url": "http://localhost:8888/api/orgs/{org}",
                "project_url": "http://localhost:8888/api/projects/{owner}/{project}",
                "user_url": "http://localhost:8888/api/users/{user}",
                "documentation_url": "http://localhost:8888/developer/api"
              }

/user:
  get:
    description: Returns with the current user
    securedBy: [ basic ]
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-user-retrieve.json
  delete:
    responses:
      204:

/users:
  type:
    collection:
      exampleCollection: !include webgme-api-users.json
      exampleItem: !include webgme-api-user-new.json  
  /{username}:
    type:
      collection-item:
        exampleItem: !include webgme-api-user-retrieve.json   

/orgs:
  get:
    description: Collection of available organizations in WebGME
    securedBy: []
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-orgs.json
  /{orgId}:
    get:
      description: Entity representing an organization
      securedBy: [ basic ]
      responses:
        200:
          body:
            application/json:
              example: !include webgme-api-org-retrieve.json
        404:
    put:
      description: Create a new organization (requires canCreate).
      securedBy: [ basic ]
      responses:
        200:
          body:
            application/json:
              example: !include webgme-api-org-retrieve.json
        403:
        404:
    delete:
      description: Delete an organization.
      securedBy: [ basic, orgOrSiteAdmin ]
      responses:
        200:
        403:
        404:
    
    /users/{username}:
      put:
        description: Adds user to the organization.
        securedBy: [ basic, orgOrSiteAdmin ]
        responses:
          200:
          403:
          404:
        
      delete:
        description: Delete user from the organization.
        securedBy: [ basic, orgOrSiteAdmin ]
        responses:
          204:
          404:
          
    /admins/{username}:
      put:
        description: Make user admin for the organization.
        securedBy: [ basic, orgOrSiteAdmin ]
        responses:
          200:
        
      delete:
        description: Remove user from admins of the organization.
        securedBy: [ basic, orgOrSiteAdmin ]
        responses:
          204:


/projects:
  type:
    collection:
      exampleCollection: !include webgme-api-projects.json
      exampleItem: !include webgme-api-project-new.json
  /{ownerId}/{projectName}:
    uriParameters:
      ownerId:
        example: guest
      projectName:
        example: ActivePanels
    type:
      collection-item:
        exampleItem: !include webgme-api-project-retrieve.json
    
    /commits:
      get:
    
    /compare/{branchOrCommitA}...{branchOrCommitB}:
      get:
      
      
    /branches:
      type:
        collection:
          exampleCollection: !include webgme-api-branches.json
          exampleItem: !include webgme-api-branch-new.json
        
      /{branchId}:
        uriParameters:
          branchId:
            example: master
        type:
          collection-item:
            exampleItem: !include webgme-api-branch-retrieve.json
        

/decorators:
  get:
    description: Returns with all available decorators
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-decorators.json

/seeds:
  get:
    description: Returns with all available seeds
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-seeds.json

/visualizers:
  get:
    description: Returns with all available visualizers
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-visualizers.json

/plugins:
  get:
    description: Lists all available plugins
    responses:
      200:
        body:
          application/json:
            example: !include webgme-api-plugins.json
  
  /{pluginName}:
    /config:
      get:
        description: Gets the default configuration for the plugin.
        responses:
          200:
            body:
              application/json:
                example: !include webgme-api-plugin-config.json
                
    /configStructure:
      get:
        description: Gets the conficuration structure for a plugin.
        responses:
          200:
            body:
              application/json:
                example: !include webgme-api-plugin-configStructure.json                
    /execute:
      post:
        description: Executes a plugin on server side. Returns with a result id.
        body:
          application/json:
            example: !include webgme-api-plugin-execute-post.json   
        
        responses:
          200:
            body:
              application/json:
                example: !include webgme-api-plugin-execute.json   
    
    /results/{resultId}:
      get:
        description: Gets a result for this plugin by resultId.
        responses:
          200:
            body:
              application/json:
                example: !include webgme-api-plugin-result.json   

/blob:
  description: TO BE MOVED here from /rest/blob
  /metadata:    
    get:
      description: lists all metadata
      
    /{metadataHash}:
      get:
        description: gets a specific metadata descriptor based on the given hash
      
  /view/{metadataHash}:
    get:
      description: views the content that is associated with the METADATA_HASH in the browser, in case the browser cannot display it then the content gets downloaded.
    
    /path/to/element.json:
      get:
        description: returns with the specified file content from a complex object.

  /download/{metadataHash}:
    get:
      description: downloads the stored file with a name and correct extension, if the content is a complex object then a zip package is returned containing all contents
    
    /path/to/element.json:
      get:
        description: downloads only a specific file from a complex content
  
  
  /createFile/{filename}:
    post:
      responses:
        200:
          body:
            application/json:
              example: !include webgme-api-blob-createFile-response.json
      
  /createMetadata:
    post:
      
      
/executor:
  description: TO BE MOVED here from /rest/executor
  
  get:
    description: List all jobs
    
  /info/{hash}:
    get:
      responses:
        200:
          body:
            application/json:
              example: !include webgme-api-executor-info.json
  
  
  /create/{hash}:
    post:
      responses:
        200:
          body:
            application/json:
              example: !include webgme-api-executor-create-response.json
  
  /update/{hash}:
    post:
    
  /cancel/{hash}:
    post:
  
  /worker:
    get:
    
    post:
    
  
  
  
  
